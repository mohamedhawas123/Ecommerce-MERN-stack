[{"/home/metro/Desktop/projects/ecom-mern/frontend/src/index.js":"1","/home/metro/Desktop/projects/ecom-mern/frontend/src/App.js":"2","/home/metro/Desktop/projects/ecom-mern/frontend/src/reportWebVitals.js":"3","/home/metro/Desktop/projects/ecom-mern/frontend/src/components/header.js":"4","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/productscreen.js":"5","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/homeScreen.js":"6","/home/metro/Desktop/projects/ecom-mern/frontend/src/components/footer.js":"7","/home/metro/Desktop/projects/ecom-mern/frontend/src/components/rating.js":"8","/home/metro/Desktop/projects/ecom-mern/frontend/src/components/product.js":"9","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/actions/productlist.js":"10","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/actions/actionTypes.js":"11","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/productlist.js":"12","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/utilty.js":"13","/home/metro/Desktop/projects/ecom-mern/frontend/src/components/Message.js":"14","/home/metro/Desktop/projects/ecom-mern/frontend/src/components/Loader.js":"15","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/cartScrean.js":"16","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/cart.js":"17","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/actions/cart.js":"18","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/user.js":"19","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/loginScreen.js":"20","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/actions/user.js":"21","/home/metro/Desktop/projects/ecom-mern/frontend/src/components/formcontainer.js":"22","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/registerScrean.js":"23","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/profilescreen.js":"24","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/shippingScrean.js":"25","/home/metro/Desktop/projects/ecom-mern/frontend/src/components/checkoutSteps.js":"26","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/paymentScrean.js":"27","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/placeorderScrean.js":"28","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/ordercreate.js":"29","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/actions/ordercreate.js":"30","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/orderScrean.js":"31","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/userListScreen.js":"32","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/userEditScrean.js":"33","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/productlistscreen.js":"34"},{"size":1229,"mtime":1618398480622,"results":"35","hashOfConfig":"36"},{"size":2103,"mtime":1619364936842,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":1613250396260,"results":"38","hashOfConfig":"36"},{"size":2790,"mtime":1619038664940,"results":"39","hashOfConfig":"36"},{"size":4882,"mtime":1616268154437,"results":"40","hashOfConfig":"36"},{"size":1450,"mtime":1616011187944,"results":"41","hashOfConfig":"36"},{"size":404,"mtime":1613255835970,"results":"42","hashOfConfig":"36"},{"size":1417,"mtime":1613341671077,"results":"43","hashOfConfig":"36"},{"size":874,"mtime":1613423215987,"results":"44","hashOfConfig":"36"},{"size":1140,"mtime":1616011661234,"results":"45","hashOfConfig":"36"},{"size":2429,"mtime":1619358216915,"results":"46","hashOfConfig":"36"},{"size":1260,"mtime":1616011940947,"results":"47","hashOfConfig":"36"},{"size":120,"mtime":1615920122840,"results":"48","hashOfConfig":"36"},{"size":293,"mtime":1616011274136,"results":"49","hashOfConfig":"36"},{"size":428,"mtime":1616268606848,"results":"50","hashOfConfig":"36"},{"size":4045,"mtime":1616529106861,"results":"51","hashOfConfig":"36"},{"size":2095,"mtime":1618170040037,"results":"52","hashOfConfig":"36"},{"size":1611,"mtime":1618169798857,"results":"53","hashOfConfig":"36"},{"size":3173,"mtime":1619360067928,"results":"54","hashOfConfig":"36"},{"size":2307,"mtime":1617653922605,"results":"55","hashOfConfig":"36"},{"size":6511,"mtime":1619362256335,"results":"56","hashOfConfig":"36"},{"size":394,"mtime":1617460649505,"results":"57","hashOfConfig":"36"},{"size":2751,"mtime":1617654121045,"results":"58","hashOfConfig":"36"},{"size":5789,"mtime":1618780483256,"results":"59","hashOfConfig":"36"},{"size":2760,"mtime":1618403597701,"results":"60","hashOfConfig":"36"},{"size":1417,"mtime":1618152529025,"results":"61","hashOfConfig":"36"},{"size":1901,"mtime":1618170328136,"results":"62","hashOfConfig":"36"},{"size":6420,"mtime":1618412203513,"results":"63","hashOfConfig":"36"},{"size":3240,"mtime":1618756081242,"results":"64","hashOfConfig":"36"},{"size":3554,"mtime":1618759676024,"results":"65","hashOfConfig":"36"},{"size":7966,"mtime":1618742495645,"results":"66","hashOfConfig":"36"},{"size":3380,"mtime":1619364215189,"results":"67","hashOfConfig":"36"},{"size":3410,"mtime":1619362068439,"results":"68","hashOfConfig":"36"},{"size":3533,"mtime":1619365026946,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"phonef",{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"72"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"72"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/metro/Desktop/projects/ecom-mern/frontend/src/index.js",[],["156","157"],"/home/metro/Desktop/projects/ecom-mern/frontend/src/App.js",["158"],"/home/metro/Desktop/projects/ecom-mern/frontend/src/reportWebVitals.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/components/header.js",["159"],"import React, {Compoent} from 'react'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Navbar, Nav, Container, NavDropdown} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {logout} from '../store/actions/user'\n\n\nconst Header = () =>  {\n    \n        const dispatch =useDispatch()\n\n        const userLogin = useSelector(state => state.user)\n        const  {userInfo} = userLogin\n\n\n        const logoutHandler = ()=> {\n            dispatch(logout())\n        }\n\n        return (\n            <Navbar bg=\"dark\" variant='dark' expand =\"lg\" collapseOnSelect>\n                <Container>\n                    <LinkContainer to=\"/\">\n                    <Navbar.Brand>ProShop</Navbar.Brand>\n                    </LinkContainer>\n                      \n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-basic-nav\">\n                    <Nav className=\"ml-auto\">\n\n\n                        <LinkContainer to=\"/cart\" >\n                        <Nav.Link> <i className=\"fas fa-shopping-cart\"></i></Nav.Link>\n                        </LinkContainer>\n\n                        {userInfo ? (\n                            <NavDropdown title={userInfo.name} id=\"username\">\n                                <LinkContainer to=\"/profile\">\n                                    <NavDropdown.Item>Profile</NavDropdown.Item>\n                                </LinkContainer>\n\n                            <NavDropdown.Item onClick={logoutHandler} > Logout </NavDropdown.Item>\n\n                            </NavDropdown>\n                        ):  <LinkContainer to=\"/login\" >\n                        <Nav.Link> <i className=\"fas fa-user\"></i></Nav.Link>\n                        </LinkContainer> }\n\n                        {userInfo && userInfo.isAdmin && (\n                            <NavDropdown title=\"Admin\" id=\"adminmenu\">\n                            <LinkContainer to=\"/admin/userlist\">\n                                <NavDropdown.Item>Users</NavDropdown.Item>\n                            </LinkContainer>\n\n                            <LinkContainer to=\"/admin/productlist\">\n                                <NavDropdown.Item>Products</NavDropdown.Item>\n                            </LinkContainer>\n\n                            <LinkContainer to=\"/admin/orderlist\">\n                                <NavDropdown.Item>Orders</NavDropdown.Item>\n                            </LinkContainer>\n\n\n                        </NavDropdown>\n                        )}\n                        \n                       \n                        \n                    </Nav>\n                </Navbar.Collapse>\n                </Container>\n              \n                \n            </Navbar>\n        )\n    \n}\n\nexport default Header ","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/productscreen.js",["160","161","162"],"import React, {useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Row, Col, Image, ListGroup, Card, Button} from 'react-bootstrap'\nimport Rating from '../components/rating'\nimport axios from 'axios'\nimport {productDetail} from '../store/actions/productlist'\nimport { connect } from \"react-redux\";\nimport Form from 'react-bootstrap/Form'\n\n\nconst ProductScreen = (props) => {\n    const [qty, setQty] = useState(1)\n    \n    \n   // const [product, setProduct] = useState([])\n    \n    useEffect( () => {\n       \n        // const fetchdata = async () => {\n        //     const {data} = await axios.get(`/api/products/${match.params.id}`)\n        //     setProduct(data)\n        // }\n\n        // fetchdata()\n\n\n        props.fetchData(props.match.params.id)\n\n\n    }, [props.match] )\n\n\n    const addToCartHandler = () => {\n        props.history.push(`/cart/${props.match.params.id}?qty=${qty}`)\n    }\n\n    const {product} = props\n    console.log(product)\n\n    return (\n        <React.Fragment>\n            <Link className=\"btn btn-dark my-3\" to =\"/\">\n                Go Back\n            </Link>\n            {\n                product ? (\n                    <Row>\n                <Col md={6}>\n                <Image src={product.image} alt={product.name} />\n                </Col>\n\n                <Col md={3}>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <h3>{product.name}</h3>\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <Rating value={product.rating} text={`${product.numReviews} reviews `} />\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        Price: ${product.price}\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                    Description: ${product.description}\n                    </ListGroup.Item>\n\n                </ListGroup>\n                </Col>\n                <Col md={3}>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>\n                                Price:\n                                </Col>\n                                \n                                <Col>\n                                <strong>${product.price}</strong>\n                                </Col>\n\n                            </Row>\n                        </ListGroup.Item>\n                    </ListGroup>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>\n                                Status:\n                                </Col>\n                                \n                                <Col>\n                               {product.countInStock > 0 ? 'In Stock' : 'Out of Stock'}\n                                </Col>\n\n                            </Row>\n                        </ListGroup.Item>\n\n\n                    </ListGroup>\n\n                    {product.countInStock > 0 && (\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Qty</Col>\n                                <Col>\n                                <Form.Control as=\"select\" value={qty} onChange={(e) => {\n                                    setQty(e.target.value)\n                                }}>\n\n                                {\n                                    [...Array(product.countInStock).keys()].map((x) => (\n                                        <option key={x+1} value={x+1} >\n                                            {x+1}\n                                        </option>\n                                    ))\n                                }\n                                    \n                                </Form.Control>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n                    )}\n\n\n                    <ListGroup.Item>\n                            <Button onClick={addToCartHandler} className=\"btn-block\" type=\"button\" disabled={product.countInStock ===0 } >\n                                Add To Cart\n                            </Button>\n                        </ListGroup.Item>\n\n                </Col>\n\n            </Row>\n                ): null\n            }\n            \n\n\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        product: state.Product.product,\n        error:state.Product.error,\n        loading: state.Product.loading\n    }\n    \n    \n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: (id) => dispatch(productDetail(id))\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductScreen)","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/homeScreen.js",["163","164","165"],"import React, {useState, useEffect} from 'react'\nimport {Row, Col} from 'react-bootstrap'\nimport Product from '../components/product'\nimport axios from 'axios'\nimport { connect } from \"react-redux\";\nimport {productList} from '../store/actions/productlist'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\n\n\n\nconst HomeScreen = (props) => {\n \n    //const [products, setProducts] = useState([])\n\n    useEffect( () => {\n        \n        props.fetchData()\n        \n    }, [] )\n\n\n    const {error, loading, products} = props\n    return (\n       \n        <div>\n            <h1>Latest Products</h1>\n           {loading ? (<Loader />): error ? (<Message variant=\"danger\">{error}</Message>) : \n            <Row>\n                {products.map(product => {\n                    return (\n                        <Col key={product._id} sm={12} md={16} lg={4}>\n                            <Product product={product} />\n                        </Col>\n                    )\n                })}\n            </Row>\n             }\n            \n        </div>\n    )\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        products: state.Product.products,\n        error:state.Product.error,\n        loading: state.Product.loading\n    }\n    \n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: () => dispatch(productList())\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen)","/home/metro/Desktop/projects/ecom-mern/frontend/src/components/footer.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/components/rating.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/components/product.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/store/actions/productlist.js",["166"],"import React from 'react'\nimport * as actionTypes from './actionTypes'\nimport axios from 'axios'\n\n\nconst fetchStart = () => {\n    return {\n        type: actionTypes.FETCH_START\n    }\n}\n\nconst fetchSucess = (products) => {\n    return {\n        type: actionTypes.FETCH_SUCCESS,\n        products: products\n    }\n}\n\n\nconst fetchDetailSucess = (product) => {\n    return {\n        type: actionTypes.FETCH_DETAIL_SUCCESS,\n        product: product\n    }\n}\n\n\nconst fetchFail = err => {\n    return {\n        type : actionTypes.FETCH_FAIL,\n        err: err\n    }\n}\n\nexport const productList = () => {\n    return dispatch => {\n\n        dispatch(fetchStart())\n        axios.get('/api/products')\n        .then(res => {\n        dispatch(fetchSucess(res.data))\n    })\n        .catch(err => {\n        dispatch(fetchFail(err))\n        \n    })\n    }\n    \n\n}\n\n\nexport const productDetail = (id) => {\n    return dispatch => {\n\n        dispatch(fetchStart())\n        axios.get(`/api/products/${id}`)\n        .then(res => {\n        dispatch(fetchDetailSucess(res.data))\n    })\n        .catch(err => {\n        dispatch(fetchFail(err))\n        \n    })\n    }\n    \n\n}","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/actions/actionTypes.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/productlist.js",["167"],"import React from 'react'\nimport {updateObject} from '../utilty'\nimport * as actionTypes from '../actions/actionTypes'\n\n\nconst initialState = {\n    products : [],\n    product: {},\n    error: null,\n    loading: false\n}\n\n\nconst fetchStart = (state, action) => {\n    return updateObject(state, {\n        error: null,\n        loading: true\n    })\n}\n\n\n\nconst fetchSucess = (state, action) => {\n    return updateObject(state, {\n        products: action.products,\n        error: null,\n        loading: false\n    })\n}\n\nconst fetchDetailSucess = (state, action) => {\n    return updateObject(state, {\n        product: action.product,\n        error:null,\n        loading:false\n    })\n}\n\nconst fetchFail = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        error: action.err\n    })\n}\n\n\n\nconst reducer = (state=initialState, action) => {\n    switch(action.type){\n        case actionTypes.FETCH_START: return fetchStart(state, action);\n        case actionTypes.FETCH_SUCCESS: return fetchSucess(state, action)\n        case actionTypes.FETCH_FAIL: return fetchFail(state, action)\n        case actionTypes.FETCH_DETAIL_SUCCESS: return fetchDetailSucess(state, action)\n        default:\n            return state\n    }\n}\n\nexport default reducer","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/utilty.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/components/Message.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/components/Loader.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/cartScrean.js",["168","169"],"import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message'\nimport {Link} from 'react-router-dom'\nimport {Row, Col, ListGroup, Image, Form, Button, Card} from 'react-bootstrap'\nimport {addToCart, removeFromCart} from '../store/actions/cart'\nimport {connect} from 'react-redux'\n\n\nconst CartScrean = ({match, history, location, it}) => {\n    \n\n    const productId = match.params.id\n\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    \n    const dispatch = useDispatch()\n    const cart = useSelector(state => state.cart)\n    const {cartItems} =   cart\n    console.log(cartItems)\n\n    useEffect( () => {\n        dispatch(addToCart(productId, qty ))\n        \n    }, [productId, qty ] )\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n\n    const checkoutHandler = () => {\n        history.push('/login?redirect=shipping')\n    }\n\n    console.log(it)\n\n   return (\n       <Row>\n           <Col md={8}>\n            <h1>Shopping Cart</h1>\n            {cartItems.length === 0 ? <Message>Your cart is empty <Link to=\"/\">Go Back</Link> </Message>: (\n                <ListGroup variant=\"flush\">\n                    {cartItems.map(item => (\n                        <ListGroup.Item key={item.product}>\n                            <Row>\n                                <Col md={2}>\n                                    <Image src={item.image} alt={item.name} alt rounded />\n                                </Col>\n                                <Col md={3}>\n                                    <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                </Col>\n                                <Col md={2}>${item.price}</Col>\n                                <Col md={2}>\n                                <Form.Control as=\"select\" value={item.qty} onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value))) }>\n\n                                {\n                                    [...Array(item.countInStock).keys()].map((x) => (\n                                        <option key={x+1} value={x+1} >\n                                            {x+1}\n                                        </option>\n                                    ))\n                                }\n                                    \n                                </Form.Control>\n                                </Col>\n\n                                <Col md={2}>\n                                <Button tpye=\"button\" variant=\"light\" onClick={() => removeFromCartHandler(item.product)}>\n                                <i className=\"fas fa-trash\"></i>\n                                </Button>\n                                </Col>\n\n\n                            </Row>\n                        </ListGroup.Item>\n                    ))}\n                </ListGroup>\n            )}\n           </Col>\n                \n         <Col md={4}>\n            \n            <Card>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <h2>Subtotal ( {cartItems.reduce( (acc, cur) => acc+cur.qty, 0 )} ) item </h2>\n                        \n                        ${cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2) }\n\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <Button type=\"button\" className=\"btn-block\" disabled={cartItems.length === 0} \n                        onClick={checkoutHandler}>Proceed to Checkout</Button>\n                    </ListGroup.Item>\n\n\n                </ListGroup>\n            </Card>\n\n            </Col>\n\n            \n\n       </Row>\n   ) \n}\n\nconst mapStateToProps = (state) => {\n    return {\n        it: state\n    }\n}\n\nexport default connect(mapStateToProps)(CartScrean)\n\n\n// if(productId) {\n//     dispatch(addToCart(productId))\n//     localStorage.setItem(\"cartItems\", JSON.stringify(it.cart.cartItems))\n\n//     console.log(it.cart.cartItems)\n\n// }","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/cart.js",["170"],"import * as actionTypes from '../actions/actionTypes'\nimport {updateObject} from '../utilty'\n\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")  ? JSON.parse(localStorage.getItem(\"cartItems\")): [] \nconsole.log(localStorage)\n\n\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\")  ? JSON.parse(localStorage.getItem(\"shippingAddress\")): {} \n\n\nconst PaymenthMethodFromStorage = localStorage.getItem(\"PaymentMethod\")  ? JSON.parse(localStorage.getItem(\"PaymentMethod\")): {} \n\n\n\nconst initalState = {\n    cartItems : [],\n    shippingAddress: {},\n    paymenthMethod: {},\n    cart: {cartItems: cartItemsFromStorage, shippingAddress:shippingAddressFromStorage, paymenthMethod: PaymenthMethodFromStorage },\n\n}\n\n\nconst addToCart = (state, action) => {\n    const item = action.item\n    console.log(action)\n    const existItem = state.cartItems.find(x => x.product === item._id)\n    \n    if(existItem) {\n        return {\n            ...state,\n            cartItems: state.cartItems.map(e => e.product === existItem._id ? item: e)\n        }\n\n    }else {\n        return {\n            ...state,\n            cartItems:[...state.cartItems, item]\n        }\n    }\n}\n\n\nconst removeFromCart = (state,action) => {\n    return {\n        ...state, \n        cartItems: state.cartItems.filter(e => e.product !== action.payload)\n    }\n}\n\n\nconst saveShippingAddress = (state,action) => {\n    return {\n        ...state, \n        shippingAddress: action.payload\n    }\n}\n\nconst savePaymentMethod = (state,action) => {\n    return {\n        ...state, \n        paymenthMethod: action.payload\n    }\n}\n\n\n\n\nconst reducer = (state=initalState, action) => {\n    switch(action.type) {\n        case actionTypes.CART_ADD_ITEM: return addToCart(state, action)\n        case actionTypes.CART_REMOVE_ITEM: return removeFromCart(state, action)\n        case actionTypes.CART_SAVE_SHAPPING_ADDRESS: return saveShippingAddress(state, action)\n        case actionTypes.CART_SAVE_PAYMENT_METHOD: return savePaymentMethod(state, action)\n\n        default:\n            return state\n    }\n}\n\nexport default reducer\n\n\n","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/actions/cart.js",["171","172"],"import React, {getState} from 'react'\nimport * as actionTypes from './actionTypes'\nimport axios from 'axios'\n\n\n\n\n\nexport const addToCart =  (id, qty) => async (dispatch, getState) =>  {\n    \n    const {data} = await axios.get(`/api/products/${id}`)\n\n    dispatch({\n        type:actionTypes.CART_ADD_ITEM,\n        item: {\n            product:data._id,\n            name : data.name,\n            image: data.image,\n            price: data.price,\n            countInStock: data.countInStock,\n            qty\n        }\n    })\n\n    localStorage.setItem(\"cartItems\", JSON.stringify(getState().cart.cartItems))\n    \n}\n\n\nexport const removeFromCart = (id) => (dispatch, getState) => {\n    \n    dispatch({\n        type: actionTypes.CART_REMOVE_ITEM,\n        payload: id\n    })\n\n    localStorage.removeItem(\"cartItems\", JSON.stringify(getState().cart.cartItems))\n}\n\n\n\nexport const saveShippingAddress = (data) => (dispatch) => {\n    \n    dispatch({\n        type: actionTypes.CART_SAVE_SHAPPING_ADDRESS,\n        payload: data\n    })\n\n    localStorage.setItem(\"shippingAddress\", JSON.stringify(data))\n}\n\nexport const savePaymentMethod = (data) => (dispatch) => {\n    \n    dispatch({\n        type: actionTypes.CART_SAVE_PAYMENT_METHOD,\n        payload: data\n    })\n\n    localStorage.setItem(\"PaymentMethod\", JSON.stringify(data))\n}\n\n\n\n \n// const adCart = (item ) => {\n//     return {\n//         type: actionTypes.CART_ADD_ITEM,\n//         item: item,\n        \n\n//     }\n// }\n\n\n\n// return dispatch => {    \n//     axios.get(`/api/products/${id}`)\n//     .then(res => {\n//         dispatch(adCart(res.data))\n//     })\n    \n// }","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/user.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/loginScreen.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/store/actions/user.js",["173"],"/home/metro/Desktop/projects/ecom-mern/frontend/src/components/formcontainer.js",["174","175"],"import React from 'react'\nimport {Form, Container  ,Button, Row, Col} from 'react-bootstrap'\n\n\n\nconst FormContainer = ({children}) => {\n\n    return (\n        <Container>\n            <Row className=\"justify-content-md-center\">\n                <Col xs={12} md={6}>\n                    {children}\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default FormContainer","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/registerScrean.js",["176","177"],"import React, {useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport {authSignup} from '../store/actions/user'\nimport FormContainer from '../components/formcontainer'\n\n\nconst RegisterScrean = ({location, history}) => {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [message, setMessage] = useState(null)\n\n\n\n    const dispatch = useDispatch()\n\n    const userRegister = useSelector(state => state.user)\n    const {loading, userInfo, error} = userRegister\n\n    const redirect = location.search ? location.search.split('=')[1]: '/'\n\n    useEffect(() => {\n        if(userInfo) {\n            history.push(redirect)\n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(authSignup(name, email, password))\n    }\n\n\n    return (\n        <FormContainer>\n\n        <h1>Sign In</h1>\n        {error && <Message variant=\"danger\">{error}</Message>}\n        {loading && <Loader />}\n        <Form onSubmit={submitHandler}>\n\n        <Form.Group controlId=\"name\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                 type=\"name\"\n                  placeholder=\"Enter name\"\n                  value={name}\n                onChange={(e)=> setName(e.target.value) }>\n\n                </Form.Control>\n            </Form.Group>\n\n\n            <Form.Group controlId=\"email\">\n                <Form.Label>Email Address</Form.Label>\n                <Form.Control\n                 type=\"email\"\n                  placeholder=\"Enter email\"\n                  value={email}\n                onChange={(e)=> setEmail(e.target.value) }>\n\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"password\">\n                <Form.Label>password</Form.Label>\n                <Form.Control\n                 type=\"password\"\n                  placeholder=\"Enter password\"\n                  value={password}\n                onChange={(e)=> setPassword(e.target.value) }>\n\n                </Form.Control>\n            </Form.Group>\n\n            <Button type=\"submit\" variant=\"primary\">\n                Sign UP\n            </Button>\n\n\n        </Form>\n\n\n        <Row className=\"py-3\">\n            <Col>\n            New Customer ? <Link to={redirect ? `/login?redirect=${redirect}`: '/login'} > \n            Regsiter\n             </Link>\n            </Col>\n        </Row>\n\n        </FormContainer>\n    )\n}\n\nexport default RegisterScrean","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/profilescreen.js",["178","179","180","181","182"],"import React, {useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Form, Button, Row, Col, Table} from 'react-bootstrap'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport {UserDetail, updateUserProfile} from '../store/actions/user'\nimport {listMyOrders} from '../store/actions/ordercreate'\nimport FormContainer from '../components/formcontainer'\nimport axios from 'axios'\n\n\nconst ProfileScrean = ({location, history}) => {\n\n    const [namee, setName] = useState('')\n    const [emaill, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [message, setMessage] = useState(null)\n\n\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state)\n    console.log(userDetails.user.userLogin)\n   // const userDetaill = userDetails.user.userLogin\n    \n   const {name, email} = userDetails.user.userInfo ? userDetails.user.userInfo: userDetails.user.userLogin.userInfo\n   \n   \n    \n    const userLogin = useSelector(state => state.user)\n   \n    // const token = userLogin.userInfo.token \n    const {userInfo, loading, error,  } = userLogin\n\n    \n    const Sucess = useSelector(state => state.user.success)\n\n    const orderMylist = useSelector(state => state.ordercreate) \n    const {orders, loading: loadingOrers, error: errorOrders} = orderMylist\n\n    useEffect(() => {\n        dispatch(UserDetail('profile'))\n        dispatch(listMyOrders())\n        setName(name)\n        setEmail(email)\n    }, [dispatch, history, userInfo, name, email])\n\n    const submitHandlerr = (e) => {\n        e.preventDefault()\n        dispatch(updateUserProfile(namee, emaill, userLogin.userInfo.token ))\n        console.log(\"works\")\n        \n       \n    }\n\n\n    return (\n      \n\n        <Row>\n            <Col md={3}>\n\n            <h1>User Profile Detail</h1>\n        {error && <Message variant=\"danger\">{error}</Message>}\n        {Sucess && <Message variant=\"success\">Profile Updated</Message>}\n        {loading && <Loader />}\n        <Form onSubmit={submitHandlerr}  >\n\n        <Form.Group controlId=\"name\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                 type=\"name\"\n                  placeholder=\"Enter name\"\n                  value={namee}\n                onChange={(e)=> setName(e.target.value) }>\n\n                </Form.Control>\n            </Form.Group>\n\n\n            <Form.Group controlId=\"email\">\n                <Form.Label>Email Address</Form.Label>\n                <Form.Control\n                 type=\"email\"\n                  placeholder=\"Enter email\"\n                  value={emaill}\n                onChange={(e)=> setEmail(e.target.value) }>\n\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"password\">\n                <Form.Label>password</Form.Label>\n                <Form.Control\n                 type=\"password\"\n                  placeholder=\"Enter password\"\n                  value={password}\n                onChange={(e)=> setPassword(e.target.value) }>\n\n                </Form.Control>\n            </Form.Group>\n\n            <Button type=\"submit\"  variant=\"primary\">\n                Update\n            </Button>\n            \n\n\n        </Form>\n\n\n            </Col>\n\n        <Col md={9}>\n            <h2>My Orders</h2>\n            {loadingOrers ? <Loader /> : errorOrders ? <Message variant=\"danger\">\n                {errorOrders}</Message>: (\n                    <Table striped bordered hover responsive className=\"table-sm\">\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>DATA</th>\n                                <th>TOTAL</th>\n                                <th>PAID</th>\n                                <th>DELIVERED</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {orders.map(order => (\n                                <tr key={order._id}>\n                                    <td>{order._id}</td>\n                                    <td>{order.createdAt}</td>\n                                    <td>{order.totalPrice}</td>\n                                    <td>\n                                        {order.isPaid ? (\n                                            order.paidAt.substring(0,10)):(\n                                                <i className=\"fas fa-times\" stlye={{color:'red'}}></i>\n                                            \n                                        )}\n                                    </td>\n\n                                    <td>\n                                        {order.isDelivered ? (\n                                            order.deliveredAt.substring(0,10)):(\n                                                <i className=\"fas fa-times\" stlye={{color:'red'}}></i>\n                                            \n                                        )}\n                                    </td>\n\n\n                                    <td>\n                                        <LinkContainer to={`/order/${order._id}`}>\n                                            <Button className=\"btn-sm\" variant=\"light\">Details</Button>\n                                        </LinkContainer>\n                                    </td>\n                                    \n                                </tr>\n                            ))}\n                        </tbody>\n\n                    </Table>\n                ) }\n        </Col>\n\n        </Row>\n\n    )\n}\n\nexport default ProfileScrean","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/shippingScrean.js",["183"],"import React, {useEffect, useState} from 'react'\nimport {Form, Button} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport FormContainer from '../components/formcontainer'\nimport {saveShippingAddress} from '../store/actions/cart'\nimport CheckoutSteps from '../components/checkoutSteps'\n\n\n\nconst ShippingAddres = ({history}) => {\n\n\n    const cart = useSelector(state => state.cart)\n    \n    const shippingAddress = cart.shippingAddress\n\n    const [address, setAddress] = useState(shippingAddress.address)\n    const [city, setCity] = useState(shippingAddress.city)\n    const [postelcode, setPostelCode] = useState(shippingAddress.postelcode)\n    const [country, setCountry] = useState(shippingAddress.country)\n\n    const dispatch = useDispatch()\n\n\n    \n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        console.log(\"continue\")\n        dispatch(saveShippingAddress({address, city, postelcode, country }))\n        history.push('/payment')\n    }\n\n    \n\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2 />\n            <h1>Shipping</h1>\n            <Form onSubmit={submitHandler}>\n            <Form.Group controlId=\"Address\">\n                <Form.Label>Address</Form.Label>\n                <Form.Control\n                 type=\"text\"\n                  placeholder=\"Enter Address\"\n                  value={address}\n                onChange={(e)=> setAddress(e.target.value) }>\n\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"city\">\n                <Form.Label>City</Form.Label>\n                <Form.Control\n                 type=\"text\"\n                  placeholder=\"Enter City\"\n                  value={city}\n                onChange={(e)=> setCity(e.target.value) }>\n\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"postelCode\">\n                <Form.Label>postelCode</Form.Label>\n                <Form.Control\n                 type=\"text\"\n                  placeholder=\"Enter PostelCode\"\n                  value={postelcode}\n                onChange={(e)=> setPostelCode(e.target.value) }>\n\n                </Form.Control>\n            </Form.Group>\n\n\n            <Form.Group controlId=\"country\">\n                <Form.Label>Country</Form.Label>\n                <Form.Control\n                 type=\"text\"\n                  placeholder=\"Enter Country\"\n                  value={country}\n                onChange={(e)=> setCountry(e.target.value) }>\n\n                </Form.Control>\n            </Form.Group>\n\n            <Button type=\"submit\" variant=\"primary\">\n                Continue\n            </Button>\n\n\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default ShippingAddres","/home/metro/Desktop/projects/ecom-mern/frontend/src/components/checkoutSteps.js",[],"/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/paymentScrean.js",["184"],"import React, {useEffect, useState} from 'react'\nimport {Form, Button, Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport FormContainer from '../components/formcontainer'\nimport {savePaymentMethod} from '../store/actions/cart'\nimport CheckoutSteps from '../components/checkoutSteps'\n\n\n\nconst PaymentScrean = ({history}) => {\n\n\n    const cart = useSelector(state => state.cart)\n    \n    const shippingAddress = cart.shippingAddress\n\n\n    if(!shippingAddress) {\n        history.push('/shipping')\n    }\n\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\n    \n\n    const dispatch = useDispatch()\n\n\n    \n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        console.log(\"continue\")\n        dispatch(savePaymentMethod(paymentMethod))\n        history.push('/placeorder')\n    }\n\n    \n\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2 step3 />\n            <h1>Payment Method</h1>\n            <Form onSubmit={submitHandler}>\n            <Form.Group>\n                <Form.Label as=\"legend\" >\n                    Select Method\n                </Form.Label>\n\n            </Form.Group>\n\n            <Col>\n            <Form.Check\n            type=\"radio\"\n             label=\"Paypal or Credit Card\"\n            id=\"PayPal\"\n            name=\"paymentMethod\"\n            value='PayPal' checked onChange={(e) => setPaymentMethod(e.target.value)} >\n\n            </Form.Check>\n\n            <Form.Check\n            type=\"radio\"\n             label=\"Stripe\"\n            id=\"stripe\"\n            name=\"paymentMethod\"\n            value='Stripe'  onChange={(e) => setPaymentMethod(e.target.value)} >\n\n            </Form.Check>\n\n            </Col>\n\n            <Button type=\"submit\" variant=\"primary\">\n                Continue\n            </Button>\n\n\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default PaymentScrean","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/placeorderScrean.js",["185","186","187","188","189"],"import React, {useEffect, useState} from 'react'\nimport {Form, Button, Col, Row ,ListGroup, Image, Card} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport FormContainer from '../components/formcontainer'\nimport CheckoutSteps from '../components/checkoutSteps'\nimport Message from '../components/Message'\nimport {Link} from 'react-router-dom'\nimport {createOrder} from '../store/actions/ordercreate'\n\n\n\nconst PlaceOrderScrean = ({history}) => {\n\n\n    const dispatch = useDispatch()\n\n    const addDecimals = (num) => {\n        return (Math.round(num *100) / 100).toFixed(2)\n    }\n\n    const cart = useSelector(state => state.cart)\n\n    cart.itemsPrice = cart.cartItems.reduce( (acc, item) => acc + item.price * item.qty, 0 )\n\n    cart.shippingPrice = cart.cartItems > 100 ? 0: 100 \n\n    cart.taxPrice = addDecimals(Number((0.15* cart.itemsPrice).toFixed(2) ))\n\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\n    \n\n    const orderCreate = useSelector(state => state.ordercreate)\n\n    const {order, loading, success} = orderCreate\n\n\n    useEffect( () => {\n        if(success) {\n            history.push(`/order/${order._id}`)\n        }\n    }, [history, success])\n\n    const placeOrderHandler =() => {\n        dispatch(createOrder({\n            orderItems: cart.cartItems,\n            shippingAddress: cart.shippingAddress,\n            paymentMethod: cart.paymenthMethod,\n            itemsPrice: cart.itemsPrice ,\n            taxPrice: cart.taxPrice,\n            shippingPrice :cart.shippingPrice ,\n            totalPrice : cart.totalPrice\n        }))\n    }\n    \n    return (\n        <div>\n            <CheckoutSteps step1 step2 step3 step4 />\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <h2>Shipping</h2>\n                            <p>\n                                <strong>Address</strong>\n                             {' '}   {cart.shippingAddress.address}, {cart.shippingAddress.city}, {' '}\n                                {cart.shippingAddress.postelCode}, {' '}\n                                {cart.shippingAddress.country}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Payment</h2>\n                            <p>\n                                <strong>Method: </strong>\n                             {cart.paymenthMethod}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n\n                        <h2>Order Items</h2>\n                        {cart.cartItems.length === 0 ? <Message>Your Cart is Empty</Message>\n                         : (\n                             <ListGroup.Item>\n\n                                 {cart.cartItems.map((item, index) => {\n                                     return (\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                <Col md={1}>\n                                                    <Image src={item.image} alt={item.name}\n                                                    fluid rounded  />\n\n                                                </Col>\n                                                <Col>\n                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\n            \n                                                </Col>\n\n\n                                                <Col md={4}>\n                                                    {item.qty} X ${item.price} = ${item.qty * item.price}\n                                                </Col>\n\n                                            </Row>\n                                         </ListGroup.Item>\n                                     )\n                                 })}\n\n                            </ListGroup.Item>\n                         )\n                          }\n\n                        </ListGroup.Item>\n\n\n                    </ListGroup>\n                </Col>\n                \n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                    <h2>Order Summary</h2>\n                                </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>${cart.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>shipping</Col>\n                                    <Col>${cart.shippingPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Tax</Col>\n                                    <Col>${cart.taxPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Total</Col>\n                                    <Col>${cart.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                {/* {error && <Message variant=\"danger\">{order}</Message>} */}\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Button\n                                 type=\"button\"\n                                  className=\"btn-block\"\n                                  disabled={cart.cartItems.length === 0}\n                                    onClick={placeOrderHandler}>Place Order</Button>\n\n                            </ListGroup.Item>\n\n                        </ListGroup>\n                    </Card>\n                </Col>\n\n            </Row>\n\n        </div>\n    )\n}\n\nexport default PlaceOrderScrean","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/ordercreate.js",["190"],"import React from 'react'\nimport {updateObject} from '../utilty'\nimport * as actionTypes from '../actions/actionTypes'\n\n\n\nconst initialState = {\n\n    loading: true,\n    success: false,\n    order: null,\n    orderItems: [],\n    shippingAddress: {},\n    error: null,\n    orders: []\n}\n\n\nconst createOrderStart = (state, action) => {\n    return updateObject(state, {\n        loading: true\n    })\n}\n\n\n\nconst createOrderSucess = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        order: action.payload,\n        success: true\n    })\n}\n\n\nconst createOrderFail = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        success: false\n    })\n}\n\n\n\nconst getOrderStart = (state, action) => {\n    return updateObject(state, {\n        loading: true\n    })\n}\n\n\n\nconst getOrderSucess = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        order: action.payload,\n        \n    })\n}\n\n\nconst getOrderFail = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        success: false, \n        error: action.error\n    })\n}\n\n\n\nconst payOrderStart = (state, action) => {\n    return updateObject(state, {\n        loading: true\n    })\n}\n\n\n\nconst payOrderSucess = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        success: true\n        \n    })\n}\n\n\nconst payOrderFail = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        error: action.error\n    })\n}\n\n\n\nconst orderListStart = (state, action) => {\n    return updateObject(state, {\n        loading: true\n    })\n}\n\n\n\nconst orderListSucess = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        orders: action.payload\n        \n    })\n}\n\n\nconst orderListFail = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        error: action.error\n    })\n}\n\n\n\n\nconst  reducer = (state=initialState, action) => {\n    switch(action.type) {\n        case actionTypes.ORDER_CREATE_START: return createOrderStart(state, action)\n        case actionTypes.ORDER_CREATE_SUCCESS: return createOrderSucess(state, action)\n        case actionTypes.ORDER_CREATE_FAIL: return createOrderFail(state, action)\n        \n        case actionTypes.ORDER_GET_START: return getOrderStart(state, action)\n        case actionTypes.ORDER_GET_SUCCESS: return getOrderSucess(state, action)\n        case actionTypes.ORDER_GET_FAIL: return getOrderFail(state, action)\n        case actionTypes.ORDER_GET_REST: return {user:{}}\n\n        case actionTypes.ORDER_PAY_START: return payOrderStart(state, action)\n        case actionTypes.ORDER_PAY_SUCCESS: return payOrderSucess(state, action)\n        case actionTypes.ORDER_PAY_FAIL: return payOrderFail(state, action)\n        case actionTypes.ORDER_PAY_REST: \n        return {}\n\n        case actionTypes.ORDER_LIST_START: return orderListStart(state, action)\n        case actionTypes.ORDER_LIST_SUCCESS: return orderListSucess(state, action)\n        case actionTypes.ORDER_LIST_FAIL: return orderListFail(state, action)\n        case actionTypes.ORDER_LIST_REST: return {orders: []}\n\n        default:\n            return state\n\n        \n    }\n}\n\nexport default reducer","/home/metro/Desktop/projects/ecom-mern/frontend/src/store/actions/ordercreate.js",["191"],"import axios from 'axios'\nimport React from 'react'\nimport * as actionTypes from '../actions/actionTypes'\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n\n    try {\n        dispatch({\n            type: actionTypes.ORDER_CREATE_START\n        })\n    \n      //  const {userLogin: {userInfo}} = getState()\n    \n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization : `Bearer ${getState().user.userInfo.token}`\n            }\n        }\n\n        console.log(getState().user.userInfo.token)\n    \n        const {data} = await axios.post('/api/orders', order, config)\n    \n        dispatch({\n            type: actionTypes.ORDER_CREATE_SUCCESS,\n            payload: data\n        })\n    }catch(error) {\n        dispatch({\n            type: actionTypes.ORDER_CREATE_FAIL,\n            payload: error.reponse && error.reponse.data.message ? error.reponse.data.message: error.message\n        })\n    }\n\n   \n\n}\n\n\n\nexport const getOrder = (id) => async (dispatch, getState) => {\n\n    try {\n        dispatch({\n            type: actionTypes.ORDER_GET_START\n        })\n    \n      //  const {userLogin: {userInfo}} = getState()\n    \n        const config = {\n            headers: {\n                Authorization : `Bearer ${getState().user.userInfo.token}`\n            }\n        }\n\n        console.log(getState().user.userInfo.token)\n    \n        const {data} = await axios.get(`/api/orders/${id}`, config)\n    \n        dispatch({\n            type: actionTypes.ORDER_GET_SUCCESS,\n            payload: data\n        })\n    }catch(error) {\n        dispatch({\n            type: actionTypes.ORDER_GET_FAIL,\n            payload: error.reponse && error.reponse.data.message ? error.reponse.data.message: error.message\n        })\n    }\n\n   \n\n}\n\n\n\nexport const payOrder = (orderId, paymentResult) => async (dispatch, getState) => {\n\n    try {\n        dispatch({\n            type: actionTypes.ORDER_PAY_START\n        })\n    \n      //  const {userLogin: {userInfo}} = getState()\n    \n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization : `Bearer ${getState().user.userInfo.token}`\n            }\n        }\n\n        console.log(getState().user.userInfo.token)\n    \n        const {data} = await axios.put(`/api/orders/${orderId}/pay`, paymentResult  ,config)\n    \n        dispatch({\n            type: actionTypes.ORDER_PAY_SUCCESS,\n            payload: data\n        })\n    }catch(error) {\n        dispatch({\n            type: actionTypes.ORDER_PAY_FAIL,\n            payload: error.reponse && error.reponse.data.message ? error.reponse.data.message: error.message\n        })\n    }\n\n   \n\n}\n\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n\n    try {\n        dispatch({\n            type: actionTypes.ORDER_LIST_START\n        })\n    \n      //  const {userLogin: {userInfo}} = getState()\n    \n        const config = {\n            headers: {\n                \n                Authorization : `Bearer ${getState().user.userInfo.token}`\n            }\n        }\n\n        \n    \n        const {data} = await axios.get(`/api/orders/myorders` ,config)\n    \n        dispatch({\n            type: actionTypes.ORDER_LIST_SUCCESS,\n            payload: data\n        })\n    }catch(error) {\n        console.log(error)\n        dispatch({\n            type: actionTypes.ORDER_LIST_FAIL,\n            payload: error.reponse && error.reponse.data.message ? error.reponse.data.message: error.message\n        })\n    }\n\n   \n\n}","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/orderScrean.js",["192","193","194","195","196","197","198"],"import React, {useEffect, useState} from 'react'\nimport {Form, Button, Col, Row ,ListGroup, Image, Card} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport FormContainer from '../components/formcontainer'\nimport Message from '../components/Message'\nimport {Link} from 'react-router-dom'\nimport {getOrder, payOrder} from '../store/actions/ordercreate'\nimport Loader  from '../components/Loader'\nimport axios from 'axios'\nimport {PayPalButton} from 'react-paypal-button-v2'\nimport {ORDER_PAY_REST} from '../store/actions/actionTypes'\n\n\nconst OrderScrean = ({match}) => {\n\n    const orderId = match.params.id\n\n    const [sdkReady, setSdkReady] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const addDecimals = (num) => {\n        return (Math.round(num *100) / 100).toFixed(2)\n    }\n\n\n\n    const cart = useSelector(state => state.cart)\n\n   \n\n    const getCreate = useSelector(state => state.ordercreate)\n\n    const {order, loading, error} = getCreate\n\n    const orderPay = useSelector(state => state.ordercreate)\n\n    const {success, loading: loadingPay} = orderPay\n\n    cart.itemsPrice = cart.cartItems.reduce( (acc, item) => acc + item.price * item.qty, 0 )\n\n\n    useEffect( () => {\n\n        const addPayPalScript = async () => {\n            const {data: clientId} = await axios.get('/api/config/paypal')\n            const script = document.createElement('script')\n            script.type = 'text/javascript'\n            script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\n            script.async = true\n            script.onload = () => {\n                setSdkReady(true)\n            }\n\n            document.body.appendChild(script)\n\n        }\n\n       \n        if(!order || success) {\n            dispatch({type: ORDER_PAY_REST })\n            dispatch(getOrder(orderId))\n        } else if(!order.isPaid) {\n            if(!window.paypal) {\n                addPayPalScript()\n            }else {\n                setSdkReady(true) \n            }\n        }\n\n       // dispatch(getOrder(orderId))\n    }, [dispatch, orderId, success])\n\n    \n    const successPaymentHandler = (paymentResult) => {\n\n        \n        dispatch(payOrder(orderId, paymentResult))\n        console.log(paymentResult)\n    }\n    \n    return loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message>\n    : <React.Fragment>\n        <h1>Order {order._id}</h1>\n        <div>\n           \n            <Row>\n                <Col md={8}>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <h2>Shipping</h2>\n                            <strong>Name: </strong> {order.user.name}\n                            <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n                            <p>\n                                <strong>Address</strong>\n                             {' '}   {order.shippingAddress.address}, {order.shippingAddress.city}, {' '}\n                                {order.shippingAddress.postelCode}, {' '}\n                                {order.shippingAddress.country}\n                            </p>\n                            {order.isDelivered ? <Message variant='success'>Delivered </Message>\n                            : <Message variant='danger'> Not Delivered  </Message>\n\n                             }\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Payment</h2>\n                            \n                            <p>\n                                <strong>Method: </strong>\n                             {order.paymentMethod}\n                            </p>\n                            {order.isPaid ? <Message variant='success'>Paid </Message>\n                            : <Message variant='danger'> Not Paid </Message>\n\n                             }\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n\n                        <h2>Order Items</h2>\n                        {order.orderItems.length === 0 ? <Message>Your order is Empty</Message>\n                         : (\n                             <ListGroup.Item>\n\n                                 {order.orderItems.map((item, index) => {\n                                     return (\n                                        <ListGroup.Item key={index} >\n                                            <Row>\n                                                <Col md={1}>\n                                                    <Image src={item.image} alt={item.name}\n                                                    fluid rounded  />\n\n                                                </Col>\n                                                <Col>\n                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\n            \n                                                </Col>\n\n\n                                                <Col md={4}>\n                                                    {item.qty} X ${item.price} = ${item.qty * item.price}\n                                                </Col>\n\n                                            </Row>\n                                         </ListGroup.Item>\n                                     )\n                                 })}\n\n                            </ListGroup.Item>\n                         )\n                          }\n\n                        </ListGroup.Item>\n\n\n                    </ListGroup>\n                </Col>\n                \n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                    <h2>Order Summary</h2>\n                                </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>${cart.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>shipping</Col>\n                                    <Col>${order.shippingPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Tax</Col>\n                                    <Col>${order.taxPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Total</Col>\n                                    <Col>${order.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            {!order.isPaid && (\n                                <ListGroup.Item>\n                                    {/* {loadingPay && <Loader />}\n                                    {!sdkReady ?  <Loader />: ( */}\n                                        <PayPalButton\n                                         amount={order.totalPrice}\n                                         onSuccess={successPaymentHandler}\n                                         />\n                                    {/* )} */}\n                                </ListGroup.Item>\n                            )}\n\n                            <ListGroup.Item>\n                                {/* {error && <Message variant=\"danger\">{order}</Message>} */}\n                            </ListGroup.Item>\n\n                          \n\n                        </ListGroup>\n                    </Card>\n                </Col>\n\n            </Row>\n\n        </div>\n    </React.Fragment>\n}\n\nexport default OrderScrean","/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/userListScreen.js",["199","200","201"],"/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/userEditScrean.js",["202","203"],"/home/metro/Desktop/projects/ecom-mern/frontend/src/screens/productlistscreen.js",["204","205","206"],{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":12},{"ruleId":"211","severity":1,"message":"215","line":1,"column":16,"nodeType":"213","messageId":"214","endLine":1,"endColumn":24},{"ruleId":"211","severity":1,"message":"216","line":3,"column":37,"nodeType":"213","messageId":"214","endLine":3,"endColumn":41},{"ruleId":"211","severity":1,"message":"217","line":5,"column":8,"nodeType":"213","messageId":"214","endLine":5,"endColumn":13},{"ruleId":"218","severity":1,"message":"219","line":30,"column":8,"nodeType":"220","endLine":30,"endColumn":21,"suggestions":"221"},{"ruleId":"211","severity":1,"message":"222","line":1,"column":16,"nodeType":"213","messageId":"214","endLine":1,"endColumn":24},{"ruleId":"211","severity":1,"message":"217","line":4,"column":8,"nodeType":"213","messageId":"214","endLine":4,"endColumn":13},{"ruleId":"218","severity":1,"message":"219","line":20,"column":8,"nodeType":"220","endLine":20,"endColumn":10,"suggestions":"223"},{"ruleId":"211","severity":1,"message":"224","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":13},{"ruleId":"211","severity":1,"message":"224","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":13},{"ruleId":"218","severity":1,"message":"225","line":25,"column":8,"nodeType":"220","endLine":25,"endColumn":25,"suggestions":"226"},{"ruleId":"227","severity":1,"message":"228","line":48,"column":77,"nodeType":"229","endLine":48,"endColumn":80},{"ruleId":"211","severity":1,"message":"230","line":2,"column":9,"nodeType":"213","messageId":"214","endLine":2,"endColumn":21},{"ruleId":"211","severity":1,"message":"224","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":13},{"ruleId":"211","severity":1,"message":"231","line":1,"column":16,"nodeType":"213","messageId":"214","endLine":1,"endColumn":24},{"ruleId":"211","severity":1,"message":"232","line":46,"column":19,"nodeType":"213","messageId":"214","endLine":46,"endColumn":24},{"ruleId":"211","severity":1,"message":"233","line":2,"column":9,"nodeType":"213","messageId":"214","endLine":2,"endColumn":13},{"ruleId":"211","severity":1,"message":"234","line":2,"column":27,"nodeType":"213","messageId":"214","endLine":2,"endColumn":33},{"ruleId":"211","severity":1,"message":"235","line":16,"column":12,"nodeType":"213","messageId":"214","endLine":16,"endColumn":19},{"ruleId":"211","severity":1,"message":"236","line":16,"column":21,"nodeType":"213","messageId":"214","endLine":16,"endColumn":31},{"ruleId":"211","severity":1,"message":"237","line":2,"column":9,"nodeType":"213","messageId":"214","endLine":2,"endColumn":13},{"ruleId":"211","severity":1,"message":"238","line":10,"column":8,"nodeType":"213","messageId":"214","endLine":10,"endColumn":21},{"ruleId":"211","severity":1,"message":"217","line":11,"column":8,"nodeType":"213","messageId":"214","endLine":11,"endColumn":13},{"ruleId":"211","severity":1,"message":"235","line":19,"column":12,"nodeType":"213","messageId":"214","endLine":19,"endColumn":19},{"ruleId":"211","severity":1,"message":"236","line":19,"column":21,"nodeType":"213","messageId":"214","endLine":19,"endColumn":31},{"ruleId":"211","severity":1,"message":"239","line":1,"column":16,"nodeType":"213","messageId":"214","endLine":1,"endColumn":25},{"ruleId":"211","severity":1,"message":"239","line":1,"column":16,"nodeType":"213","messageId":"214","endLine":1,"endColumn":25},{"ruleId":"211","severity":1,"message":"222","line":1,"column":27,"nodeType":"213","messageId":"214","endLine":1,"endColumn":35},{"ruleId":"211","severity":1,"message":"233","line":2,"column":9,"nodeType":"213","messageId":"214","endLine":2,"endColumn":13},{"ruleId":"211","severity":1,"message":"238","line":4,"column":8,"nodeType":"213","messageId":"214","endLine":4,"endColumn":21},{"ruleId":"211","severity":1,"message":"240","line":34,"column":19,"nodeType":"213","messageId":"214","endLine":34,"endColumn":26},{"ruleId":"218","severity":1,"message":"241","line":41,"column":8,"nodeType":"220","endLine":41,"endColumn":26,"suggestions":"242"},{"ruleId":"211","severity":1,"message":"224","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":13},{"ruleId":"211","severity":1,"message":"224","line":2,"column":8,"nodeType":"213","messageId":"214","endLine":2,"endColumn":13},{"ruleId":"211","severity":1,"message":"233","line":2,"column":9,"nodeType":"213","messageId":"214","endLine":2,"endColumn":13},{"ruleId":"211","severity":1,"message":"234","line":2,"column":15,"nodeType":"213","messageId":"214","endLine":2,"endColumn":21},{"ruleId":"211","severity":1,"message":"238","line":4,"column":8,"nodeType":"213","messageId":"214","endLine":4,"endColumn":21},{"ruleId":"211","severity":1,"message":"243","line":18,"column":12,"nodeType":"213","messageId":"214","endLine":18,"endColumn":20},{"ruleId":"211","severity":1,"message":"244","line":22,"column":11,"nodeType":"213","messageId":"214","endLine":22,"endColumn":22},{"ruleId":"211","severity":1,"message":"245","line":38,"column":30,"nodeType":"213","messageId":"214","endLine":38,"endColumn":40},{"ruleId":"218","severity":1,"message":"246","line":72,"column":8,"nodeType":"220","endLine":72,"endColumn":36,"suggestions":"247"},{"ruleId":"211","severity":1,"message":"222","line":1,"column":27,"nodeType":"213","messageId":"214","endLine":1,"endColumn":35},{"ruleId":"211","severity":1,"message":"233","line":2,"column":9,"nodeType":"213","messageId":"214","endLine":2,"endColumn":13},{"ruleId":"211","severity":1,"message":"237","line":5,"column":9,"nodeType":"213","messageId":"214","endLine":5,"endColumn":13},{"ruleId":"211","severity":1,"message":"248","line":28,"column":20,"nodeType":"213","messageId":"214","endLine":28,"endColumn":33},{"ruleId":"211","severity":1,"message":"249","line":28,"column":41,"nodeType":"213","messageId":"214","endLine":28,"endColumn":52},{"ruleId":"211","severity":1,"message":"222","line":1,"column":27,"nodeType":"213","messageId":"214","endLine":1,"endColumn":35},{"ruleId":"211","severity":1,"message":"233","line":2,"column":9,"nodeType":"213","messageId":"214","endLine":2,"endColumn":13},{"ruleId":"211","severity":1,"message":"237","line":5,"column":9,"nodeType":"213","messageId":"214","endLine":5,"endColumn":13},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Compoent' is defined but never used.","'Card' is defined but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["252"],"'useState' is defined but never used.",["253"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["254"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'updateObject' is defined but never used.","'getState' is defined but never used.","'token' is assigned a value but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'Link' is defined but never used.","'FormContainer' is defined but never used.","'useEffect' is defined but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.",["255"],"'sdkReady' is assigned a value but never used.","'addDecimals' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'order'. Either include it or remove the dependency array.",["256"],"'loadingUpdate' is assigned a value but never used.","'errorUpdate' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},"Update the dependencies array to be: [props, props.match]",{"range":"267","text":"268"},"Update the dependencies array to be: [props]",{"range":"269","text":"270"},"Update the dependencies array to be: [dispatch, productId, qty]",{"range":"271","text":"272"},"Update the dependencies array to be: [history, order._id, success]",{"range":"273","text":"274"},"Update the dependencies array to be: [dispatch, order, orderId, success]",{"range":"275","text":"276"},[788,801],"[props, props.match]",[505,507],"[props]",[766,783],"[dispatch, productId, qty]",[1237,1255],"[history, order._id, success]",[2059,2087],"[dispatch, order, orderId, success]"]