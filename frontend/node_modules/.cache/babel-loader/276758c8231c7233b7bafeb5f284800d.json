{"ast":null,"code":"import React from 'react';\nimport { updateObject } from '../utilty';\nimport * as actionTypes from '../actions/actionTypes';\nconst initialState = {\n  loading: true,\n  success: false,\n  order: null,\n  orderItems: [],\n  shippingAddress: {}\n};\n\nconst createOrderStart = (state, action) => {\n  return updateObject(state, {\n    loading: true\n  });\n};\n\nconst createOrderSucess = (state, action) => {\n  return updateObject(state, {\n    loading: false,\n    order: action.payload,\n    success: true\n  });\n};\n\nconst createOrderFail = (state, action) => {\n  return updateObject(state, {\n    loading: false,\n    success: false\n  });\n};\n\nconst getOrderStart = (state, action) => {\n  return updateObject(state, {\n    loading: true\n  });\n};\n\nconst getOrderSucess = (state, action) => {\n  return updateObject(state, {\n    loading: false,\n    order: action.payload\n  });\n};\n\nconst getOrderFail = (state, action) => {\n  return updateObject(state, {\n    loading: false,\n    success: false\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ORDER_CREATE_START:\n      return createOrderStart(state, action);\n\n    case actionTypes.ORDER_CREATE_SUCCESS:\n      return createOrderSucess(state, action);\n\n    case actionTypes.ORDER_CREATE_FAIL:\n      return createOrderFail(state, action);\n\n    case actionTypes.ORDER_GET_START:\n      return getOrderStart(state, action);\n\n    case actionTypes.ORDER_GET_SUCCESS:\n      return getOrderSucess(state, action);\n\n    case actionTypes.ORDER_GET_FAIL:\n      return getOrderFail(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/ordercreate.js"],"names":["React","updateObject","actionTypes","initialState","loading","success","order","orderItems","shippingAddress","createOrderStart","state","action","createOrderSucess","payload","createOrderFail","getOrderStart","getOrderSucess","getOrderFail","reducer","type","ORDER_CREATE_START","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_GET_START","ORDER_GET_SUCCESS","ORDER_GET_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,QAA2B,WAA3B;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AAIA,MAAMC,YAAY,GAAG;AAEjBC,EAAAA,OAAO,EAAE,IAFQ;AAGjBC,EAAAA,OAAO,EAAE,KAHQ;AAIjBC,EAAAA,KAAK,EAAE,IAJU;AAKjBC,EAAAA,UAAU,EAAE,EALK;AAMjBC,EAAAA,eAAe,EAAE;AANA,CAArB;;AAUA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,SAAOV,YAAY,CAACS,KAAD,EAAQ;AACvBN,IAAAA,OAAO,EAAE;AADc,GAAR,CAAnB;AAGH,CAJD;;AAQA,MAAMQ,iBAAiB,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACzC,SAAOV,YAAY,CAACS,KAAD,EAAQ;AACvBN,IAAAA,OAAO,EAAE,KADc;AAEvBE,IAAAA,KAAK,EAAEK,MAAM,CAACE,OAFS;AAGvBR,IAAAA,OAAO,EAAE;AAHc,GAAR,CAAnB;AAKH,CAND;;AASA,MAAMS,eAAe,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACvC,SAAOV,YAAY,CAACS,KAAD,EAAQ;AACvBN,IAAAA,OAAO,EAAE,KADc;AAEvBC,IAAAA,OAAO,EAAE;AAFc,GAAR,CAAnB;AAIH,CALD;;AASA,MAAMU,aAAa,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACrC,SAAOV,YAAY,CAACS,KAAD,EAAQ;AACvBN,IAAAA,OAAO,EAAE;AADc,GAAR,CAAnB;AAGH,CAJD;;AAQA,MAAMY,cAAc,GAAG,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACtC,SAAOV,YAAY,CAACS,KAAD,EAAQ;AACvBN,IAAAA,OAAO,EAAE,KADc;AAEvBE,IAAAA,KAAK,EAAEK,MAAM,CAACE;AAFS,GAAR,CAAnB;AAKH,CAND;;AASA,MAAMI,YAAY,GAAG,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACpC,SAAOV,YAAY,CAACS,KAAD,EAAQ;AACvBN,IAAAA,OAAO,EAAE,KADc;AAEvBC,IAAAA,OAAO,EAAE;AAFc,GAAR,CAAnB;AAIH,CALD;;AAUA,MAAOa,OAAO,GAAG,CAACR,KAAK,GAACP,YAAP,EAAqBQ,MAArB,KAAgC;AAC7C,UAAOA,MAAM,CAACQ,IAAd;AACI,SAAKjB,WAAW,CAACkB,kBAAjB;AAAqC,aAAOX,gBAAgB,CAACC,KAAD,EAAQC,MAAR,CAAvB;;AACrC,SAAKT,WAAW,CAACmB,oBAAjB;AAAuC,aAAOT,iBAAiB,CAACF,KAAD,EAAQC,MAAR,CAAxB;;AACvC,SAAKT,WAAW,CAACoB,iBAAjB;AAAoC,aAAOR,eAAe,CAACJ,KAAD,EAAQC,MAAR,CAAtB;;AAEpC,SAAKT,WAAW,CAACqB,eAAjB;AAAkC,aAAOR,aAAa,CAACL,KAAD,EAAQC,MAAR,CAApB;;AAClC,SAAKT,WAAW,CAACsB,iBAAjB;AAAoC,aAAOR,cAAc,CAACN,KAAD,EAAQC,MAAR,CAArB;;AACpC,SAAKT,WAAW,CAACuB,cAAjB;AAAiC,aAAOR,YAAY,CAACP,KAAD,EAAQC,MAAR,CAAnB;;AAGjC;AACI,aAAOD,KAAP;AAXR;AAeH,CAhBD;;AAkBA,eAAeQ,OAAf","sourcesContent":["import React from 'react'\nimport {updateObject} from '../utilty'\nimport * as actionTypes from '../actions/actionTypes'\n\n\n\nconst initialState = {\n\n    loading: true,\n    success: false,\n    order: null,\n    orderItems: [],\n    shippingAddress: {}\n}\n\n\nconst createOrderStart = (state, action) => {\n    return updateObject(state, {\n        loading: true\n    })\n}\n\n\n\nconst createOrderSucess = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        order: action.payload,\n        success: true\n    })\n}\n\n\nconst createOrderFail = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        success: false\n    })\n}\n\n\n\nconst getOrderStart = (state, action) => {\n    return updateObject(state, {\n        loading: true\n    })\n}\n\n\n\nconst getOrderSucess = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        order: action.payload,\n        \n    })\n}\n\n\nconst getOrderFail = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        success: false\n    })\n}\n\n\n\n\nconst  reducer = (state=initialState, action) => {\n    switch(action.type) {\n        case actionTypes.ORDER_CREATE_START: return createOrderStart(state, action)\n        case actionTypes.ORDER_CREATE_SUCCESS: return createOrderSucess(state, action)\n        case actionTypes.ORDER_CREATE_FAIL: return createOrderFail(state, action)\n        \n        case actionTypes.ORDER_GET_START: return getOrderStart(state, action)\n        case actionTypes.ORDER_GET_SUCCESS: return getOrderSucess(state, action)\n        case actionTypes.ORDER_GET_FAIL: return getOrderFail(state, action)\n        \n\n        default:\n            return state\n\n        \n    }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}