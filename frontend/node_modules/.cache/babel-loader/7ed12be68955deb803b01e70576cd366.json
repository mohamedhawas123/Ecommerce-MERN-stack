{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utilty';\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [];\nconsole.log(localStorage);\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem(\"shippingAddress\")) : {};\nconst PaymenthMethodFromStorage = localStorage.getItem(\"PaymentMethod\") ? JSON.parse(localStorage.getItem(\"PaymentMethod\")) : {};\nconst initalState = {\n  cartItems: [],\n  shippingAddress: {},\n  paymenthMethod: {},\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage,\n    paymenthMethod: PaymenthMethodFromStorage\n  }\n};\n\nconst addToCart = (state, action) => {\n  const item = action.item;\n  console.log(action);\n  const existItem = state.cartItems.find(x => x.product === item._id);\n\n  if (existItem) {\n    return { ...state,\n      cartItems: state.cartItems.map(e => e.product === existItem._id ? item : e)\n    };\n  } else {\n    return { ...state,\n      cartItems: [...state.cartItems, item]\n    };\n  }\n};\n\nconst removeFromCart = (state, action) => {\n  return { ...state,\n    cartItems: state.cartItems.filter(e => e.product !== action.payload)\n  };\n};\n\nconst saveShippingAddress = (state, action) => {\n  return { ...state,\n    shippingAddress: action.payload\n  };\n};\n\nconst savePaymentMethod = (state, action) => {\n  return { ...state,\n    paymenthMethod: action.payload\n  };\n};\n\nconst reducer = (state = initalState, action) => {\n  switch (action.type) {\n    case actionTypes.CART_ADD_ITEM:\n      return addToCart(state, action);\n\n    case actionTypes.CART_REMOVE_ITEM:\n      return removeFromCart(state, action);\n\n    case actionTypes.CART_SAVE_SHAPPING_ADDRESS:\n      return saveShippingAddress(state, action);\n\n    case actionTypes.CART_SAVE_PAYMENT_METHOD:\n      return savePaymentMethod(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/cart.js"],"names":["actionTypes","updateObject","cartItemsFromStorage","localStorage","getItem","JSON","parse","console","log","shippingAddressFromStorage","PaymenthMethodFromStorage","initalState","cartItems","shippingAddress","paymenthMethod","cart","addToCart","state","action","item","existItem","find","x","product","_id","map","e","removeFromCart","filter","payload","saveShippingAddress","savePaymentMethod","reducer","type","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHAPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes'\nimport {updateObject} from '../utilty'\n\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")  ? JSON.parse(localStorage.getItem(\"cartItems\")): [] \nconsole.log(localStorage)\n\n\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\")  ? JSON.parse(localStorage.getItem(\"shippingAddress\")): {} \n\n\nconst PaymenthMethodFromStorage = localStorage.getItem(\"PaymentMethod\")  ? JSON.parse(localStorage.getItem(\"PaymentMethod\")): {} \n\n\n\nconst initalState = {\n    cartItems : [],\n    shippingAddress: {},\n    paymenthMethod: {},\n    cart: {cartItems: cartItemsFromStorage, shippingAddress:shippingAddressFromStorage, paymenthMethod: PaymenthMethodFromStorage },\n\n}\n\n\nconst addToCart = (state, action) => {\n    const item = action.item\n    console.log(action)\n    const existItem = state.cartItems.find(x => x.product === item._id)\n    \n    if(existItem) {\n        return {\n            ...state,\n            cartItems: state.cartItems.map(e => e.product === existItem._id ? item: e)\n        }\n\n    }else {\n        return {\n            ...state,\n            cartItems:[...state.cartItems, item]\n        }\n    }\n}\n\n\nconst removeFromCart = (state,action) => {\n    return {\n        ...state, \n        cartItems: state.cartItems.filter(e => e.product !== action.payload)\n    }\n}\n\n\nconst saveShippingAddress = (state,action) => {\n    return {\n        ...state, \n        shippingAddress: action.payload\n    }\n}\n\nconst savePaymentMethod = (state,action) => {\n    return {\n        ...state, \n        paymenthMethod: action.payload\n    }\n}\n\n\n\n\nconst reducer = (state=initalState, action) => {\n    switch(action.type) {\n        case actionTypes.CART_ADD_ITEM: return addToCart(state, action)\n        case actionTypes.CART_REMOVE_ITEM: return removeFromCart(state, action)\n        case actionTypes.CART_SAVE_SHAPPING_ADDRESS: return saveShippingAddress(state, action)\n        case actionTypes.CART_SAVE_PAYMENT_METHOD: return savePaymentMethod(state, action)\n\n        default:\n            return state\n    }\n}\n\nexport default reducer\n\n\n"]},"metadata":{},"sourceType":"module"}