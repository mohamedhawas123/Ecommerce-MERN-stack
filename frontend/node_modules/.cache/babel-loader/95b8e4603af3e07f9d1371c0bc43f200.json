{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utilty';\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [];\nconsole.log(localStorage);\nconst initalState = {\n  cartItems: [],\n  cart: {\n    cartItems: cartItemsFromStorage\n  }\n};\n\nconst addToCart = (state, action) => {\n  const item = action.item;\n  console.log(action);\n  const existItem = state.cartItems.find(x => x.product === item._id);\n\n  if (existItem) {\n    return { ...state,\n      cartItems: state.cartItems.map(e => e.product === existItem._id ? item : e)\n    };\n  } else {\n    return { ...state,\n      cartItems: [...state.cartItems, item]\n    };\n  }\n};\n\nconst removeFromCart = (state, action) => {\n  return { ...state,\n    cartItems: state.cartItems.filter(e => e.product !== action.payload)\n  };\n};\n\nconst reducer = (state = initalState, action) => {\n  switch (action.type) {\n    case actionTypes.CART_ADD_ITEM:\n      return addToCart(state, action);\n\n    case actionTypes.CART_REMOVE_ITEM:\n      return removeFromCart(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/metro/Desktop/projects/ecom-mern/frontend/src/store/reducer/cart.js"],"names":["actionTypes","updateObject","cartItemsFromStorage","localStorage","getItem","JSON","parse","console","log","initalState","cartItems","cart","addToCart","state","action","item","existItem","find","x","product","_id","map","e","removeFromCart","filter","payload","reducer","type","CART_ADD_ITEM","CART_REMOVE_ITEM"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAAQC,YAAR,QAA2B,WAA3B;AAGA,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAqCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAArC,GAAoF,EAAjH;AACAG,OAAO,CAACC,GAAR,CAAYL,YAAZ;AAEA,MAAMM,WAAW,GAAG;AAChBC,EAAAA,SAAS,EAAG,EADI;AAEhBC,EAAAA,IAAI,EAAE;AAACD,IAAAA,SAAS,EAAER;AAAZ;AAFU,CAApB;;AAMA,MAAMU,SAAS,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,QAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYM,MAAZ;AACA,QAAME,SAAS,GAAGH,KAAK,CAACH,SAAN,CAAgBO,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcJ,IAAI,CAACK,GAA7C,CAAlB;;AAEA,MAAGJ,SAAH,EAAc;AACV,WAAO,EACH,GAAGH,KADA;AAEHH,MAAAA,SAAS,EAAEG,KAAK,CAACH,SAAN,CAAgBW,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACH,OAAF,KAAcH,SAAS,CAACI,GAAxB,GAA8BL,IAA9B,GAAoCO,CAA7D;AAFR,KAAP;AAKH,GAND,MAMM;AACF,WAAO,EACH,GAAGT,KADA;AAEHH,MAAAA,SAAS,EAAC,CAAC,GAAGG,KAAK,CAACH,SAAV,EAAqBK,IAArB;AAFP,KAAP;AAIH;AACJ,CAjBD;;AAoBA,MAAMQ,cAAc,GAAG,CAACV,KAAD,EAAOC,MAAP,KAAkB;AACrC,SAAO,EACH,GAAGD,KADA;AAEHH,IAAAA,SAAS,EAAEG,KAAK,CAACH,SAAN,CAAgBc,MAAhB,CAAuBF,CAAC,IAAIA,CAAC,CAACH,OAAF,KAAcL,MAAM,CAACW,OAAjD;AAFR,GAAP;AAIH,CALD;;AAQA,MAAMC,OAAO,GAAG,CAACb,KAAK,GAACJ,WAAP,EAAoBK,MAApB,KAA+B;AAC3C,UAAOA,MAAM,CAACa,IAAd;AACI,SAAK3B,WAAW,CAAC4B,aAAjB;AAAgC,aAAOhB,SAAS,CAACC,KAAD,EAAQC,MAAR,CAAhB;;AAChC,SAAKd,WAAW,CAAC6B,gBAAjB;AAAmC,aAAON,cAAc,CAACV,KAAD,EAAQC,MAAR,CAArB;;AACnC;AACI,aAAOD,KAAP;AAJR;AAMH,CAPD;;AASA,eAAea,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes'\nimport {updateObject} from '../utilty'\n\n\nconst cartItemsFromStorage = localStorage.getItem(\"cartItems\")  ? JSON.parse(localStorage.getItem(\"cartItems\")): [] \nconsole.log(localStorage)\n\nconst initalState = {\n    cartItems : [],\n    cart: {cartItems: cartItemsFromStorage}\n}\n\n\nconst addToCart = (state, action) => {\n    const item = action.item\n    console.log(action)\n    const existItem = state.cartItems.find(x => x.product === item._id)\n    \n    if(existItem) {\n        return {\n            ...state,\n            cartItems: state.cartItems.map(e => e.product === existItem._id ? item: e)\n        }\n\n    }else {\n        return {\n            ...state,\n            cartItems:[...state.cartItems, item]\n        }\n    }\n}\n\n\nconst removeFromCart = (state,action) => {\n    return {\n        ...state, \n        cartItems: state.cartItems.filter(e => e.product !== action.payload)\n    }\n}\n\n\nconst reducer = (state=initalState, action) => {\n    switch(action.type) {\n        case actionTypes.CART_ADD_ITEM: return addToCart(state, action)\n        case actionTypes.CART_REMOVE_ITEM: return removeFromCart(state, action)\n        default:\n            return state\n    }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}